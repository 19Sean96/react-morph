{"version":3,"sources":["/Users/brunnolou/Projects/react-morph/docz/src/pages/GettingStarted/curve.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_brunnolou_Projects_react_morph_docz_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","useState","useMorph","easeInSin","easeOutSin","easeIn","easeOut","butterfly","larva","circIn","circOut","circInOut","reversed","createMirroredEasing","_useState","_useState2","_Users_brunnolou_Projects_react_morph_docz_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","toggle","setToggle","morph","isReversed","easings","translateX","translateY","onClick","key","src","width","style","float","isMDXComponent"],"mappings":"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","file":"static/js/src-pages-getting-started-curve.d5e4c9b7.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { useState } from 'react';\nimport { useMorph } from 'react-morph/index';\nimport { easeInSin, easeOutSin, easeIn, easeOut } from 'react-morph/easings';\nimport { butterfly, larva } from '../../images';\nimport {\n  circIn,\n  circOut,\n  circInOut,\n  reversed,\n  createMirroredEasing,\n} from '@popmotion/easing';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"curves--easings\"\n    }}>{`Curves & Easings`}</h1>\n    <h2 {...{\n      \"id\": \"curves\"\n    }}>{`Curves`}</h2>\n    <p>{`It's possible to create a curve instead of a linear translation between morph states.`}</p>\n    <p>{`In order to achieve that you need to set different easings between `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Y`}</inlineCode>{` values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useMorph({\n  easings: {\n    translateX: easeOutSin,\n    translateY: easeInSin,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"demo\"\n    }}>{`Demo`}</h2>\n    <Playground __position={0} __code={'() => {\\n  // Handle toggle state as you normally would.\\n  const [toggle, setToggle] = useState(false)\\n  const morph = useMorph({\\n    isReversed: !toggle,\\n    easings: {\\n      translateX: easeOutSin,\\n      translateY: easeInSin,\\n    },\\n  })\\n  return (\\n    <div>\\n      <button onClick={() => setToggle(!toggle)}>Let\\'s morph!</button>\\n      <br />\\n      {toggle && <img key=\\\"one\\\" {...morph} src={larva} width=\\\"30\\\" />}\\n\\n      <br />\\n      <br />\\n      <br />\\n      <br />\\n\\n      {!toggle && (\\n        <img\\n          key=\\\"two\\\"\\n          {...morph({ style: { float: \\'right\\' } })}\\n          src={butterfly}\\n          width=\\\"50\\\"\\n        />\\n      )}\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      useState,\n      useMorph,\n      easeInSin,\n      easeOutSin,\n      easeIn,\n      easeOut,\n      butterfly,\n      larva,\n      circIn,\n      circOut,\n      circInOut,\n      reversed,\n      createMirroredEasing\n    }} mdxType=\"Playground\">{() => {\n        // Handle toggle state as you normally would.\n        const [toggle, setToggle] = useState(false);\n        const morph = useMorph({\n          isReversed: !toggle,\n          easings: {\n            translateX: easeOutSin,\n            translateY: easeInSin\n          }\n        });\n        return <div>\n\t      <button onClick={() => setToggle(!toggle)}>Let's morph!</button>\n\t      <br />\n      {toggle && <img key=\"one\" {...morph} src={larva} width=\"30\" />}\n\n      <br />\n      <br />\n      <br />\n      <br />\n\n      {!toggle && <img key=\"two\" {...morph({\n            style: {\n              float: 'right'\n            }\n          })} src={butterfly} width=\"50\" />}\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"easings\"\n    }}>{`Easings`}</h2>\n    <p>{`The valid CSS property keys are: `}<inlineCode parentName=\"p\">{`translateX`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`translateY`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`scaleX`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`scaleY`}</inlineCode>{`.`}</p>\n    <p>{`The value should be an easing function that `}<strong parentName=\"p\">{`doesn't clamp`}</strong>{` the values.`}</p>\n    <p>{`React Morph provides some \"safe\" easing functions. You can import them like these:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { easeInSin, easeOutSin, easeIn, easeOut } from 'react-morph/easings';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fine-tuning\"\n    }}>{`Fine-tuning`}</h3>\n    <p>{`Different ease functions will result in different curve shapes.\nDepending on the easing and spring values you might need to fine-tune other spring properties like `}<inlineCode parentName=\"p\">{`restDisplacementThreshold`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`overshootClamping`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`useMorph({\n  spring: {\n    restDisplacementThreshold: 0.0001,\n    overshootClamping: true,\n  },\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}
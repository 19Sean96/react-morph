(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"./src/pages/styling/styling.mdx":function(e,n,t){"use strict";t.r(n);var s=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=t("./node_modules/react/index.js"),o=t.n(i),a=t("./node_modules/@mdx-js/react/dist/index.es.js"),l=t("./node_modules/docz/dist/index.esm.js"),r=function(){return o.a.createElement("h1",{style:{border:"3px dotted red"}},"This is an h1")};"undefined"!==typeof r&&r&&r===Object(r)&&Object.defineProperty(r,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"H1Block",filename:"src/pages/styling/styling.js"}});var c=function(){return o.a.createElement("h1",{style:{border:"3px dotted red",display:"inline-block"}},"This is an h1")};"undefined"!==typeof c&&c&&c===Object(c)&&Object.defineProperty(c,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"H1Inline",filename:"src/pages/styling/styling.js"}}),t.d(n,"default",function(){return p});var b={},d="wrapper";function p(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)(d,Object.assign({},b,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"styling"},"Styling"),Object(a.b)("p",null,"You can style your components with whatever you like.\nYou can use ",Object(a.b)("strong",{parentName:"p"},"inline styles"),", ",Object(a.b)("strong",{parentName:"p"},"CSS")," class names or a ",Object(a.b)("strong",{parentName:"p"},"CSS-in-JS")," solution like Styled Components."),Object(a.b)("h3",{id:"caveats"},"Caveats"),Object(a.b)("p",null,"Since React Morph rely on ",Object(a.b)("inlineCode",{parentName:"p"},"getBoundingClientRect")," there's a few things you should know."),Object(a.b)("h2",{id:"whitespace"},"Whitespace"),Object(a.b)("p",null,"You need to remove extra whitespace, to match the real element's width.\nFor example, ",Object(a.b)("inlineCode",{parentName:"p"},"block")," elements like an ",Object(a.b)("inlineCode",{parentName:"p"},"h1")," don't have intuitive size:"),Object(a.b)(l.c,{__position:0,__code:"() => {\n  return (\n    <h1\n      style={{\n        border: '2px dotted',\n      }}\n    >\n      This is an h1\n    </h1>\n  )\n}",__scope:{props:this?this.props:t,Playground:l.c,H1Block:r,H1Inline:c},mdxType:"Playground"},function(){return Object(a.b)("h1",{style:{border:"2px dotted"}},"This is an h1")}),Object(a.b)("p",null,"To solve this we can style it with ",Object(a.b)("inlineCode",{parentName:"p"},"display: inline-block"),":"),Object(a.b)(l.c,{__position:1,__code:"() => {\n  return (\n    <h1\n      style={{\n        border: '2px dotted',\n        display: 'inline-block',\n      }}\n    >\n      This is an h1\n    </h1>\n  )\n}",__scope:{props:this?this.props:t,Playground:l.c,H1Block:r,H1Inline:c},mdxType:"Playground"},function(){return Object(a.b)("h1",{style:{border:"2px dotted",display:"inline-block"}},"This is an h1")}),Object(a.b)("p",null,"Another way is by wrapping with flexbox ",Object(a.b)("inlineCode",{parentName:"p"},"display: flex"),":"),Object(a.b)(l.c,{__position:2,__code:"() => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'start',\n      }}\n    >\n      <h1\n        style={{\n          border: '2px dotted',\n        }}\n      >\n        This is an h1\n      </h1>\n      <h1\n        style={{\n          border: '2px dotted',\n        }}\n      >\n        This is another one\n      </h1>\n    </div>\n  )\n}",__scope:{props:this?this.props:t,Playground:l.c,H1Block:r,H1Inline:c},mdxType:"Playground"},function(){return Object(a.b)("div",{style:{display:"flex",flexDirection:"column",alignItems:"start"}},Object(a.b)("h1",{style:{border:"2px dotted"}},"This is an h1"),Object(a.b)("h1",{style:{border:"2px dotted"}},"This is another one"))}),Object(a.b)("h2",{id:"margins"},"Margins"),Object(a.b)("p",null,"Margins also create extra white space.\nYou can wrap the element and add the margin to it."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'// Don\'t\n<div className="margin-bottom" {...morph}>\n  \u2026\n</div>\n')),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'// Do\n<div className="margin-bottom">\n  <div {...morph}>\u2026</div>\n</div>\n')),Object(a.b)("p",null,"Or you can make sure to ",Object(a.b)("strong",{parentName:"p"},"match the margins in both states"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'// Do\n{\n  toggle ? (\n    <div className="margin-bottom first" {...morph} />\n  ) : (\n    <div className="margin-bottom last" {...morph} />\n  );\n}\n')),Object(a.b)("h3",{id:"other"},"Other"),Object(a.b)("p",null,"List items could be miscalculated; a simple solution is: ",Object(a.b)("inlineCode",{parentName:"p"},"list-style: none;"),"."))}p&&p===Object(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/pages/styling/styling.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=src-pages-styling-styling.0f4280aa71dc2ab0656c.js.map
{"version":3,"sources":["/Users/brunnolou/Projects/react-morph/docz/src/pages/api/useMorphKeys.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_brunnolou_Projects_react_morph_docz_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"oXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBACLL,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,iBACHN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,kDAILP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2CACLL,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,kDACHN,OAAAE,EAAA,EAAAF,CAAA,sBAAiBA,OAAAE,EAAA,EAAAF,CAAA,UAAQM,WAAW,KAAnB,UAAjB,4FAC2CN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAD3C,iBAEAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,gBADZ,ioBA6BTX,EAAWY,gBAAiB","file":"static/js/src-pages-api-use-morph-keys.6abdef0d.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"usemorphkeys\"\n    }}><inlineCode parentName=\"h1\">{`useMorphKeys`}</inlineCode></h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMorphKeys } from 'react-morph';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usemorphkeysstring-options-morphoptions\"\n    }}><inlineCode parentName=\"h3\">{`useMorphKeys(string[], options: MorphOptions)`}</inlineCode></h3>\n    <p>{`Return an `}<strong parentName=\"p\">{`object`}</strong>{` with multiple morphs with the given keys.\nAlso, each morph will receive an incremental `}<inlineCode parentName=\"p\">{`zIndex`}</inlineCode>{` option prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Index = () => {\n  const morphs = useMorphKeys(['key1', 'key2']);\n  // morphs = { key1: …, key2: … }\n\n  return (\n    <main>\n      {toggle && <Item morphs={morphs} />}\n      {!toggle && <Details morphs={morphs} />}\n    </main>\n  );\n};\n\nconst Item = ({ morphs }) => (\n  <div {...morphs.key1}>\n    <p {...morphs.key2}>Foo</p>\n  </div>\n);\n\nconst Details = ({ morphs }) => (\n  <div {...morphs.key1}>\n    <h1 {...morphs.key2}>Foo</h1>\n  </div>\n);\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}
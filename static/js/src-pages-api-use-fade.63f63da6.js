(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./src/pages/api/useFade.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return p});var a=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),s=n("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=n("./node_modules/react/index.js"),i=n("./node_modules/@mdx-js/react/dist/index.es.js"),l=n("./node_modules/docz/dist/index.esm.js"),b=n("./node_modules/react-morph/index.js"),d=n("./src/images.js"),c={},r="wrapper";function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(i.b)(r,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"fade-in-fade-out"},"Fade in Fade out"),Object(i.b)("h2",{id:"intro"},"Intro"),Object(i.b)("p",null,"When creating complex morph animation some elements can simply fade in or fade out.\nThis would make more pleasent animations since there will be less cognitive load to\nprocess all the movements."),Object(i.b)("p",null,"Import the ",Object(i.b)("inlineCode",{parentName:"p"},"useFade")," hook."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { useFade } from 'react-morph';\n")),Object(i.b)("p",null,"Call the hook in you function component."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const fade = useFade(options);\n")),Object(i.b)("p",null,"Then spread the props to the elements you want to fade."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<img {...fade} src="larva.png" width="50">\n')),Object(i.b)("h2",{id:"simple-fade"},"Simple fade"),Object(i.b)(l.c,{__position:0,__code:'() => {\n  // Handle toggle state as you normally would.\n  const [toggle, setToggle] = useState(false)\n  const spring = { damping: 5, stiffness: 10 }\n  const fadeIn = useFade({ spring, isInitial: toggle, delaysRatio: 1 })\n  const fadeOut = useFade({ spring, isInitial: !toggle })\n  return (\n    <div>\n      <button onClick={() => setToggle(!toggle)}>Let\'s fade!</button>\n\n      <br />\n\n      {toggle ? (\n        <img\n          key="one"\n          {...fadeIn}\n          src={larva}\n          width="80"\n          style={{ float: \'left\' }}\n        />\n      ) : (\n        <img\n          key="two"\n          {...fadeOut}\n          src={butterfly}\n          width="80"\n          style={{ float: \'right\' }}\n        />\n      )}\n    </div>\n  )\n}',__scope:{props:this?this.props:n,Playground:l.c,useState:o.useState,useFade:b.useFade,butterfly:d.a,larva:d.b},mdxType:"Playground"},function(){var e=Object(o.useState)(!1),t=Object(a.a)(e,2),n=t[0],s=t[1],l={damping:5,stiffness:10},c=Object(b.useFade)({spring:l,isInitial:n,delaysRatio:1}),r=Object(b.useFade)({spring:l,isInitial:!n});return Object(i.b)("div",null,Object(i.b)("button",{onClick:function(){return s(!n)}},"Let's fade!"),Object(i.b)("br",null),n?Object(i.b)("img",Object.assign({key:"one"},c,{src:d.b,width:"80",style:{float:"left"}})):Object(i.b)("img",Object.assign({key:"two"},r,{src:d.a,width:"80",style:{float:"right"}})))}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"\u26a0\ufe0f Warning: ")),Object(i.b)("p",{parentName:"blockquote"},"Differentl than ",Object(i.b)("inlineCode",{parentName:"p"},"useMorph"),":"),Object(i.b)("ul",{parentName:"blockquote"},Object(i.b)("li",{parentName:"ul"},"Don't spread the same fade into multiple elements."),Object(i.b)("li",{parentName:"ul"},"Create one for the initial state and another for the final state"))),Object(i.b)("h2",{id:"disable-initial-fade"},"Disable initial fade"),Object(i.b)("p",null,"Usually when you create a complex morph with some fades, we just want to fade in/out when toggle.\nIn order to disable the initial fade in on page load you can toggle the option ",Object(i.b)("inlineCode",{parentName:"p"},"isInitial"),"."),Object(i.b)("p",null,"Normally you will set the ",Object(i.b)("inlineCode",{parentName:"p"},"isInitial")," option on the initial state and disable it to the final state."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"useFade({ isInitial: toggle });\n")),Object(i.b)("h2",{id:"delay"},"Delay"),Object(i.b)("p",null,"By default ",Object(i.b)("inlineCode",{parentName:"p"},"useFade")," delays the fade in and speeds up the fade out.\nThis is expecially useful to use with ",Object(i.b)("inlineCode",{parentName:"p"},"useMorph"),"."),Object(i.b)("p",null,"To update this behaviour you can set the option ",Object(i.b)("inlineCode",{parentName:"p"},"delaysRatio"),".\nThe default value is ",Object(i.b)("inlineCode",{parentName:"p"},"0.1"),". To disable the delay set ",Object(i.b)("inlineCode",{parentName:"p"},"delaysRatio")," to ",Object(i.b)("inlineCode",{parentName:"p"},"1"),"."))}p&&p===Object(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/pages/api/useFade.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=src-pages-api-use-fade.0f4280aa71dc2ab0656c.js.map
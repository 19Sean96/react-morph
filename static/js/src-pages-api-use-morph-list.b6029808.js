(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./src/pages/api/useMorphList.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var s=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),r={},a="wrapper";function p(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)(a,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"usemorphlist"},Object(o.b)("inlineCode",{parentName:"h1"},"useMorphList")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { useMorphList } from 'react-morph';\n")),Object(o.b)("h3",{id:"usemorphlistany--number-options-morphoptions"},Object(o.b)("inlineCode",{parentName:"h3"},"useMorphList(any[] | number, options: MorphOptions)")),Object(o.b)("p",null,"Return an ",Object(o.b)("strong",{parentName:"p"},"array")," with multiple morphs with the same length of the given array or the length of the given number.\nAlso, each morph will receive an incremental ",Object(o.b)("inlineCode",{parentName:"p"},"zIndex")," option prop."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"const myItems = [{ name: 'Foo' }, { name: 'bar' }];\nconst morphs = useMorphList(myItems);\n\n<ul>\n  {myItems.map((user, index) => (\n    <li>\n      {isExpanded && <strong {...morphs[index]}>{user.name}</strong>}\n      {isExpanded && <h1 {...morphs[index]}>{user.name}</h1>}\n    </li>\n  ))}\n</ul>;\n")))}p&&p===Object(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/pages/api/useMorphList.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=src-pages-api-use-morph-list.0f4280aa71dc2ab0656c.js.map
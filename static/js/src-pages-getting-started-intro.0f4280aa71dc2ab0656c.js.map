{"version":3,"sources":["/Users/brunnolou/Projects/react-morph/docz/src/pages/GettingStarted/intro.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_brunnolou_Projects_react_morph_docz_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","useState","useMorph","butterfly","larva","_useState","_useState2","_Users_brunnolou_Projects_react_morph_docz_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","toggle","setToggle","morph","onClick","key","src","width","height","style","float","isMDXComponent"],"mappings":"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","file":"static/js/src-pages-getting-started-intro.f3f79970.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { useState } from 'react';\nimport { useMorph } from 'react-morph/';\nimport { butterfly, larva } from '../../images';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"react-morph-Ô∏èü¶ã\"\n    }}>{`React Morph Ô∏èü¶ã`}</h1>\n    <h4 {...{\n      \"id\": \"morphing-ui-transitions-made-simple\"\n    }}>{`Morphing UI transitions made simple`}</h4>\n    <p>{`Magically animates one element into another just by tagging the first and last state.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started-\"\n    }}>{`Getting Started üêõ`}</h2>\n    <p>{`Import the `}<inlineCode parentName=\"p\">{`useMorph`}</inlineCode>{` hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMorph } from 'react-morph';\n`}</code></pre>\n    <p>{`Call the hook in you function component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const morph = useMorph(options);\n`}</code></pre>\n    <p>{`Then spread the props to the elements you want to morph.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<img {...morph} src=\"larva.png\" width=\"30\">\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<img {...morph} src=\"butterfly.png\" width=\"80\">\n`}</code></pre>\n    <p>{`You should handle the state as you normally would for mounting and unmounting the elements.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Make sure you have just `}<strong parentName=\"p\">{`ONE element rendered at same time`}</strong>{`.`}</p>\n    </blockquote>\n    <Playground __position={0} __code={'() => {\\n  // Handle toggle state as you normally would.\\n  const [toggle, setToggle] = useState(true)\\n  const morph = useMorph()\\n  return (\\n    <div>\\n      <button onClick={() => setToggle(!toggle)}>Let\\'s morph!</button>\\n      <br />\\n      {toggle && (\\n        <img key=\\\"one\\\" {...morph} src={larva} width=\\\"30\\\" height=\\\"30\\\" />\\n      )}\\n      <br />\\n      <br />\\n      <br />\\n      {!toggle && (\\n        <img\\n          key=\\\"two\\\"\\n          {...morph}\\n          src={butterfly}\\n          width=\\\"80\\\"\\n          height=\\\"80\\\"\\n          style={{ float: \\'right\\' }}\\n        />\\n      )}\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      useState,\n      useMorph,\n      butterfly,\n      larva\n    }} mdxType=\"Playground\">\n  {() => {\n        // Handle toggle state as you normally would.\n        const [toggle, setToggle] = useState(true);\n        const morph = useMorph();\n        return <div>\n      <button onClick={() => setToggle(!toggle)}>Let's morph!</button>\n  \t\t\t\t<br />\n          {toggle && <img key=\"one\" {...morph} src={larva} width=\"30\" height=\"30\" />}\n  \t\t\t\t<br />\n  \t\t\t\t<br />\n  \t\t\t\t<br />\n          {!toggle && <img key=\"two\" {...morph} src={butterfly} width=\"80\" height=\"80\" style={{\n            float: 'right'\n          }} />}\n        </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"controling-the-state\"\n    }}>{`Controling the state`}</h2>\n    <p>{`React morph doesn't handle the state for you. There is no play or stop method.`}</p>\n    <p>{`Also, it won't hide or show the elements for you. It's up to you how you want to handle it.`}</p>\n    <p>{`The animation will be triggered as soon as the new element with the same `}<inlineCode parentName=\"p\">{`{...morph}`}</inlineCode>{` enters the DOM.`}</p>\n    <p>{`That's why you cannot have the two state elements at the same time.`}</p>\n    <p>{`The elements can use `}<inlineCode parentName=\"p\">{`useState`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  toggle ? (\n    <img {...morph} src={larva} width=\"30\" />\n  ) : (\n    <img {...morph} src={butterfly} width=\"80\" />\n  );\n}\n`}</code></pre>\n    <p>{`But also you can use `}<inlineCode parentName=\"p\">{`react-router`}</inlineCode></p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}